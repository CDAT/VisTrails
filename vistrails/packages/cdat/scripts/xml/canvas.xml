<diagnostic author="PCMDI's software team" codepath="vcs.Canvas.Canvas" programminglanguage="Python" type="class" url="http://cdat.sf.net" version="6.0.alpha">
	<action name="boxfill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab doc="Data at least 2D, last 2 dimensions will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: boxfill                        # Generate a boxfill plot

 Description of Function:
    Generate a boxfill plot given the data, boxfill graphics method, and 
    template. If no boxfill class object is given, then the 'default' boxfill
    graphics method is used. Similarly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('boxfill')                        # Show all the existing boxfill graphics methods
    box=a.getboxfill('quick')                # Create instance of 'quick'
    a.boxfill(array,box)                # Plot array using specified box and default 
                                        #         template
    templt=a.gettemplate('AMIP')        # Create an instance of template 'AMIP'
    a.clear()                           # Clear VCS canvas
    a.boxfill(array,box,template)       # Plot array using specified box and template
    a.boxfill(box,array,template)       # Plot array using specified box and template
    a.boxfill(template,array,box)       # Plot array using specified box and template
    a.boxfill(template,array,box)       # Plot array using specified box and template
    a.boxfill(array,'AMIP','quick')     # Use 'AMIP' template and 'quick' boxfill
    a.boxfill('AMIP',array,'quick')     # Use 'AMIP' template and 'quick' boxfill
    a.boxfill('AMIP','quick',array)     # Use 'AMIP' template and 'quick' boxfill

###################################################################################################################
###########################################                         ###############################################
########################################## End boxfill Description ################################################
#########################################                         #################################################
###################################################################################################################
		</doc>
	</action>
	<action name="createboxfill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<boxfill doc="no default" instance="vcs.boxfill.Gfb" position="0"/>
		</output>
		<doc>
			Function: createboxfill                # Construct a new boxfill graphics method

 Description of Function:
    Create a new boxfill graphics method given the the name and the existing
    boxfill graphics method to copy the attributes from. If no existing
    boxfill graphics method name is given, then the default boxfill graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:
    a=vcs.init()
    a.show('boxfill')
    box=a.createboxfill('example1',)
    a.show('boxfill')
    box=a.createboxfill('example2','quick')
    a.show('boxfill')

#########################################################################################################################
###########################################                               ###############################################
########################################## End createboxfill Description ################################################
#########################################                               #################################################
#########################################################################################################################
		</doc>
	</action>
	<action name="createisofill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<isofill doc="no default" instance="vcs.isofill.Gfi" position="0"/>
		</output>
		<doc>
			Function: createisofill  # Construct a new isofill graphics method

 Description of Function:
    Create a new isofill graphics method given the the name and the existing
    isofill graphics method to copy the attributes from. If no existing
    isofill graphics method name is given, then the default isofill graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:
    a=vcs.init()
    a.show('isofill')
    iso=a.createisofill('example1',)
    a.show('isofill')
    iso=a.createisofill('example2','quick')
    a.show('isofill')

#########################################################################################################################
###########################################                               ###############################################
########################################## End createisofill Description ################################################
#########################################                               #################################################
#########################################################################################################################
		</doc>
	</action>
	<action name="createisoline" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<isoline doc="no default" instance="vcs.isoline.Gi" position="0"/>
		</output>
		<doc>
			Function: createisoline                # Construct a new isoline graphics method

 Description of Function:
    Create a new isoline graphics method given the the name and the existing
    isoline graphics method to copy the attributes from. If no existing
    isoline graphics method name is given, then the default isoline graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:

    a=vcs.init()
    a.show('isoline')
    iso=a.createisoline('example1',)
    a.show('isoline')
    iso=a.createisoline('example2','quick')
    a.show('isoline')

#########################################################################################################################
###########################################                               ###############################################
########################################## End createisoline Description ################################################
#########################################                               #################################################
#########################################################################################################################
		</doc>
	</action>
	<action name="createoutfill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<outfill doc="no default" instance="vcs.outfill.Gfo" position="0"/>
		</output>
		<doc>
			Function: createoutfill                # Construct a new outfill graphics method

 Description of Function:
    Create a new outfill graphics method given the the name and the existing
    outfill graphics method to copy the attributes from. If no existing
    outfill graphics method name is given, then the default outfill graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:

    a=vcs.init()
    a.show('outfill')
    out=a.createoutfill('example1',)
    a.show('outfill')
    out=a.createoutfill('example2','quick')
    a.show('outfill')

#########################################################################################################################
###########################################                               ###############################################
########################################## End createoutfill Description ################################################
#########################################                               #################################################
#########################################################################################################################
		</doc>
	</action>
	<action name="createoutline" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<outline doc="no default" instance="vcs.outline.Go" position="0"/>
		</output>
		<doc>
			Function: createoutline                # Construct a new outline graphics method

 Description of Function:
    Create a new outline graphics method given the the name and the existing
    outline graphics method to copy the attributes from. If no existing
    outline graphics method name is given, then the default outline graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:

    a=vcs.init()
    a.show('outline')
    out=a.createoutline('example1',)
    a.show('outline')
    out=a.createoutline('example2','quick')
    a.show('outline')

#########################################################################################################################
###########################################                               ###############################################
########################################## End createoutline Description ################################################
#########################################                               #################################################
#########################################################################################################################
		</doc>
	</action>
	<action name="createscatter" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<scatter doc="no default" instance="vcs.scatter.GSp" position="0"/>
		</output>
		<doc>
			Function: createscatter                # Construct a new scatter graphics method

 Description of Function:
    Create a new scatter graphics method given the the name and the existing
    scatter graphics method to copy the attributes from. If no existing
    scatter graphics method name is given, then the default scatter graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:
    a=vcs.init()
    a.show('scatter')
    sct=a.createscatter('example1',)
    a.show('scatter')
    sct=a.createscatter('example2','quick')
    a.show('scatter')

#########################################################################################################################
###########################################                               ###############################################
########################################## End createscatter Description ################################################
#########################################                               #################################################
#########################################################################################################################
		</doc>
	</action>
	<action name="createxvsy" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<xvsy doc="no default" instance="vcs.xvsy.GXY" position="0"/>
		</output>
		<doc>
			Function: createxvsy                      # Construct a new XvsY graphics method

 Description of Function:
    Create a new XvsY graphics method given the the name and the existing
    XvsY graphics method to copy the attributes from. If no existing
    XvsY graphics method name is given, then the default XvsY graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:
    a=vcs.init()
    a.show('xvsy')
    xy=a.createxvsy('example1',)
    a.show('xvsy')
    xy=a.createxvsy('example2','quick')
    a.show('xvsy')

######################################################################################################################
###########################################                            ###############################################
########################################## End createxvsy Description ################################################
#########################################                            #################################################
######################################################################################################################
		</doc>
	</action>
	<action name="createxyvsy" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<xyvsy doc="no default" instance="vcs.xyvsy.GXy" position="0"/>
		</output>
		<doc>
			Function: createxyvsy                  # Construct a new Xyvsy graphics method

 Description of Function:
    Create a new Xyvsy graphics method given the the name and the existing
    Xyvsy graphics method to copy the attributes from. If no existing
    Xyvsy graphics method name is given, then the default Xyvsy graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:

    a=vcs.init()
    a.show('xyvsy')
    xyy=a.createxyvsy('example1',)
    a.show('xyvsy')
    xyy=a.createxyvsy('example2','quick')
    a.show('xyvsy')

#######################################################################################################################
###########################################                             ###############################################
########################################## End createxyvsy Description ################################################
#########################################                             #################################################
#######################################################################################################################
		</doc>
	</action>
	<action name="createyxvsx" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<source_GM_name doc="copy the contents of the source object to the newly created one. If no name is given, then the 'default' graphics methond contents is copied over to the new object." instance="str" position="1"/>
			<new_GM_name doc="name of the new graphics method object. If no name is given, then one will be created for use." instance="str" position="0"/>
		</input>
		<output>
			<yxvsx doc="no default" instance="vcs.yxvsx.GYx" position="0"/>
		</output>
		<doc>
			Function: createyxvsx                  # Construct a new Yxvsx graphics method

 Description of Function:
    Create a new Yxvsx graphics method given the the name and the existing
    Yxvsx graphics method to copy the attributes from. If no existing
    Yxvsx graphics method name is given, then the default Yxvsx graphics
    method will be used as the graphics method to which the attributes will
    be copied from.

    If the name provided already exists, then a error will be returned. Graphics
    method names must be unique.

 Example of Use:

    a=vcs.init()
    a.show('yxvsx')
    yxx=a.createyxvsx('example1',)
    a.show('yxvsx')
    yxx=a.createyxvsx('example2','quick')
    a.show('yxvsx')

#######################################################################################################################
###########################################                             ###############################################
########################################## End createyxvsx Description ################################################
#########################################                             #################################################
#######################################################################################################################
		</doc>
	</action>
	<action name="getboxfill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<boxfill doc="no default" instance="vcs.boxfill.Gfb" position="0"/>
		</output>
		<doc>
			Function: getboxfill                        # Construct a new boxfill graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    boxfill class object from an existing VCS boxfill graphics method. If
    no boxfill name is given, then boxfill 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a 
    different name can be modified. (See the createboxfill function.)

 Example of Use:
    a=vcs.init()
    a.show('boxfill')                   # Show all the existing boxfill graphics methods
    box=a.getboxfill()                  # box instance of 'default' boxfill graphics
                                        # method
    box2=a.getboxfill('quick')          # box2 instance of existing 'quick' boxfill
                                        #         graphics method
######################################################################################################################
###########################################                            ###############################################
########################################## End getboxfill Description ################################################
#########################################                            #################################################
######################################################################################################################
		</doc>
	</action>
	<action name="getisofill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<isofill doc="no default" instance="vcs.isofill.Gfi" position="0"/>
		</output>
		<doc>
			Function: getisofill          Construct a new isofill graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    isofill class object from an existing VCS isofill graphics method. If
    no isofill name is given, then isofill 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createisofill function.)

 Example of Use:
    a=vcs.init()
    a.show('isofill')                   # Show all the existing isofill graphics methods
    iso=a.getisofill()                  # iso instance of 'default' isofill graphics
                                        #       method
    iso2=a.getisofill('quick')          # iso2 instance of existing 'quick' isofill
                                        #       graphics method
######################################################################################################################
###########################################                            ###############################################
########################################## End getisofill Description ################################################
#########################################                            #################################################
######################################################################################################################
		</doc>
	</action>
	<action name="getisoline" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<isoline doc="no default" instance="vcs.isoline.Gi" position="0"/>
		</output>
		<doc>
			Function: getisoline                        # Construct a new isoline graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    isoline class object from an existing VCS isoline graphics method. If
    no isoline name is given, then isoline 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createisoline function.)

 Example of Use:
    a=vcs.init()
    a.show('isoline')                   # Show all the existing isoline graphics methods
    iso=a.getisoline()                  # iso instance of 'default' isoline graphics
                                        #       method
    iso2=a.getisoline('quick')          # iso2 instance of existing 'quick' isoline
                                        #       graphics method
######################################################################################################################
###########################################                            ###############################################
########################################## End getisoline Description ################################################
#########################################                            #################################################
######################################################################################################################
		</doc>
	</action>
	<action name="getoutfill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<outfill doc="no default" instance="vcs.outfill.Gfo" position="0"/>
		</output>
		<doc>
			Function: getoutfill                        # Construct a new outfill graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    outfill class object from an existing VCS outfill graphics method. If
    no outfill name is given, then outfill 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createoutfill function.)

 Example of Use:
    a=vcs.init()
    a.show('outfill')                   # Show all the existing outfill graphics methods
    out=a.getoutfill()                  # out instance of 'default' outfill graphics
                                        #       method
    out2=a.getoutfill('quick')          # out2 instance of existing 'quick' outfill
                                        #       graphics method

######################################################################################################################
###########################################                            ###############################################
########################################## End getoutfill Description ################################################
#########################################                            #################################################
######################################################################################################################
		</doc>
	</action>
	<action name="getoutline" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<outline doc="no default" instance="vcs.outline.Go" position="0"/>
		</output>
		<doc>
			Function: getoutline                        # Construct a new outline graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    outline class object from an existing VCS outline graphics method. If
    no outline name is given, then outline 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createoutline function.)

 Example of Use:
    a=vcs.init()
    a.show('outline')                   # Show all the existing outline graphics methods
    out=a.getoutline()                  # out instance of 'default' outline graphics
                                        #       method
    out2=a.getoutline('quick')          # out2 instance of existing 'quick' outline
                                        #       graphics method

######################################################################################################################
###########################################                            ###############################################
########################################## End getoutline Description ################################################
#########################################                            #################################################
######################################################################################################################
		</doc>
	</action>
	<action name="getscatter" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<scatter doc="no default" instance="vcs.scatter.GSp" position="0"/>
		</output>
		<doc>
			Function: getscatter                   # Construct a new scatter graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    scatter class object from an existing VCS scatter graphics method. If
    no scatter name is given, then scatter 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createscatter function.)

 Example of Use:
    a=vcs.init()
    a.show('scatter')                   # Show all the existing scatter graphics methods
    sct=a.getscatter()                  # sct instance of 'default' scatter graphics
                                        #       method
    sct2=a.getscatter('quick')          # sct2 instance of existing 'quick' scatter
                                        #       graphics method

######################################################################################################################
###########################################                            ###############################################
########################################## End getscatter Description ################################################
#########################################                            #################################################
######################################################################################################################
		</doc>
	</action>
	<action name="getxvsy" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<xvsy doc="no default" instance="vcs.xvsy.GXY" position="0"/>
		</output>
		<doc>
			Function: getxvsy                   # Construct a new XvsY graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    XvsY class object from an existing VCS XvsY graphics method. If
    no XvsY name is given, then XvsY 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createxvsy function.)

 Example of Use:
    a=vcs.init()
    a.show('xvsy')                      # Show all the existing XvsY graphics methods
    xy=a.getxvsy()                      # xy instance of 'default' XvsY graphics
                                        #       method
    xy2=a.getxvsy('quick')              # xy2 instance of existing 'quick' XvsY
                                        #       graphics method

###################################################################################################################
###########################################                         ###############################################
########################################## End getxvsy Description ################################################
#########################################                         #################################################
###################################################################################################################
		</doc>
	</action>
	<action name="getxyvsy" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<xyvsy doc="no default" instance="vcs.xyvsy.GXy" position="0"/>
		</output>
		<doc>
			Function: getxyvsy        # Construct a new Xyvsy graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    Xyvsy class object from an existing VCS Xyvsy graphics method. If
    no Xyvsy name is given, then Xyvsy 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createxyvsy function.)

 Example of Use:
    a=vcs.init()
    a.show('xyvsy')                     # Show all the existing Xyvsy graphics methods
    xyy=a.getxyvsy()                    # xyy instance of 'default' Xyvsy graphics
                                        #       method
    xyy2=a.getxyvsy('quick')            # xyy2 instance of existing 'quick' Xyvsy
                                        #       graphics method
####################################################################################################################
###########################################                          ###############################################
########################################## End getxyvsy Description ################################################
#########################################                          #################################################
####################################################################################################################
		</doc>
	</action>
	<action name="getyxvsx" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<GM_name doc="retrieve the graphics method object of the given name. If no name is given, then retrieve the 'default' graphics method." instance="str" position="0"/>
		</input>
		<output>
			<yxvsx doc="no default" instance="vcs.yxvsx.GYx" position="0"/>
		</output>
		<doc>
			Function: getyxvsx                     # Construct a new Yxvsx graphics method

 Description of Function:
    VCS contains a list of graphics methods. This function will create a
    Yxvsx class object from an existing VCS Yxvsx graphics method. If
    no Yxvsx name is given, then Yxvsx 'default' will be used.

    Note, VCS does not allow the modification of `default' attribute
    sets. However, a `default' attribute set that has been copied under a
    different name can be modified. (See the createyxvsx function.)

 Example of Use:
    a=vcs.init()
    a.show('yxvsx')                     # Show all the existing Yxvsx graphics methods
    yxx=a.getyxvsx()                    # yxx instance of 'default' Yxvsx graphics
                                        #       method
    yxx2=a.getyxvsx('quick')            # yxx2 instance of existing 'quick' Yxvsx
                                        #       graphics method
####################################################################################################################
###########################################                          ###############################################
########################################## End getyxvsx Description ################################################
#########################################                          #################################################
####################################################################################################################
		</doc>
	</action>
	<action name="isofill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab doc="Data at least 2D, last 2 dimensions will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: isofill                        # Generate an isofill plot

 Description of Function:
    Generate a isofill plot given the data, isofill graphics method, and
    template. If no isofill class object is given, then the 'default' isofill
    graphics method is used. Similarly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('isofill')                   # Show all the existing isofill graphics methods
    iso=a.getisofill('quick')           # Create instance of 'quick'
    a.isofill(array,iso)                # Plot array using specified iso and default 
                                        #       template
    a.clear()                           # Clear VCS canvas
    a.isofill(array,iso,template)       # Plot array using specified iso and template

###################################################################################################################
###########################################                         ###############################################
########################################## End isofill Description ################################################
#########################################                         #################################################
###################################################################################################################
		</doc>
	</action>
	<action name="isoline" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab doc="Data at least 2D, last 2 dimensions will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: isoline                        # Generate an isoline plot

 Description of Function:
    Generate a isoline plot given the data, isoline graphics method, and
    template. If no isoline class object is given, then the 'default' isoline
    graphics method is used. Similarly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('isoline')                   # Show all the existing isoline graphics methods
    iso=a.getisoline('quick')           # Create instance of 'quick'
    a.isoline(array,iso)                # Plot array using specified iso and default 
                                        #       template
    a.clear()                           # Clear VCS canvas
    a.isoline(array,iso,template)       # Plot array using specified iso and template

###################################################################################################################
###########################################                         ###############################################
########################################## End isoline Description ################################################
#########################################                         #################################################
###################################################################################################################
		</doc>
	</action>
	<action name="outfill" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab doc="Data at least 2D, last 2 dimensions will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: outfill                        # Generate an outfill plot

 Description of Function:
    Generate a outfill plot given the data, outfill graphics method, and
    template. If no outfill class object is given, then the 'default' outfill
    graphics method is used. Simerly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('outfill')                   # Show all the existing outfill graphics methods
    out=a.getoutfill('quick')           # Create instance of 'quick'
    a.outfill(array,out)                # Plot array using specified out and default 
                                        #       template
    a.clear()                           # Clear VCS canvas
    a.outfill(array,out,template)       # Plot array using specified out and template

###################################################################################################################
###########################################                         ###############################################
########################################## End outfill Description ################################################
#########################################                         #################################################
###################################################################################################################
		</doc>
	</action>
	<action name="outline" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab doc="Data at least 2D, last 2 dimensions will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: outline                        # Generate an outline plot

 Description of Function:
    Generate a outline plot given the data, outline graphics method, and
    template. If no outline class object is given, then the 'default' outline
    graphics method is used. Simerly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('outline')                   # Show all the existing outline graphics methods
    out=a.getoutline('quick')           # Create instance of 'quick'
    a.outline(array,out)                # Plot array using specified out and default 
                                        #       template
    a.clear()                           # Clear VCS canvas
    a.outline(array,out,template)       # Plot array using specified out and template

###################################################################################################################
###########################################                         ###############################################
########################################## End outline Description ################################################
#########################################                         #################################################
###################################################################################################################
		</doc>
	</action>
	<action name="plot" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<gm default="'default'" doc="graphic method to use" instance="str/vcs.boxfill.Gfb/vcs.isofill.Gfi/vcs.isoline.Gi/vcs.meshfill.Gfm/vcs.vector.Gv/vcs.scatter.GSp/vcs.outline.Go/vcs.outline.Gfo/vcs.taylor.Gtd/vcs.xvsy.GXY/vcs.xyvsy.GXy/vcs.yxvsx.GYx/vcsaddons.core.VCSaddon/vcs.continents.Gcon"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<template default="'default'" doc="vcs template" instance="str/vcs.template.P"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<continents doc="continents type number" instance="int"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
			<slab2 default="None" doc="Data at least 1D, last dimension(s) will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
		</options>
		<input>
			<slab_or_primary_object doc="Data at least 1D, last dimension(s) will be plotted, or primary vcs object" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list/vcs.fillarea.Tf/vcs.line.Tl/vcs.marker.Tm/vcs.textcombined.Tc" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: plot

 Description of plot:
    Plot an array(s) of data given a template and graphics method. The VCS template is
    used to define where the data and variable attributes will be displayed on the VCS 
    Canvas. The VCS graphics method is used to define how the array(s) will be shown
    on the VCS Canvas.

 The form of the call is:
    plot(array1=None, array2=None, template_name=None, graphics_method=None,
            graphics_name=None, [key=value [, key=value [, ...]]])
    
            where array1 and array2 are NumPy arrays.

    Plot keywords:
      ratio [default is none]
            None: let the self.ratio attribute decide
            0,'off': overwritte self.ratio and do nothing about the ratio
            'auto': computes an automatic ratio
            '3',3: y dim will be 3 times bigger than x dim (restricted to original tempalte.data area
            Adding a 't' at the end of the ratio, makes the tickmarks and boxes move along.
            
    Variable attribute keys:
       comment1         = string   #Comment plotted above file_comment
       comment2         = string   #Comment plotted above comment1
       comment3         = string   #Comment plotted above comment2
       comment4         = string   #Comment plotted above comment4
       file_comment     = string   #Comment (defaults to file.comment)
       hms              = string (hh:mm:ss) #Hour, minute, second
       long_name        = string   #Descriptive variable name
       name             = string   #Variable name (defaults to var.id)
       time             = cdtime   #instance (relative or absolute),
                                    cdtime, reltime or abstime value
       units            = string   #Variable units
       ymd              = string (yy/mm/dd) #Year, month, day
    
    Dimension attribute keys (dimension length=n):
       [x|y|z|t|w]array = NumPy array of length n    # x or y Dimension values
       [x|y|z|t|w]array = NumPy array of length n    # x or y Dimension values
       [x|y]bounds       = NumPy array of shape (n,2) # x or y Dimension boundaries
       [x|y|z|t|w]name   = string                     # x or y Dimension name
       [x|y|z|t|w]units  = string                     # x or y Dimension units
       [x|y]weights      = NumPy array of length n    # x or y Dimension weights (used to
                                                        calculate area-weighted mean)
    
    CDMS object:
       [x|y|z|t|w]axis   = CDMS axis object           # x or y Axis
       grid              = CDMS grid object           # Grid object (e.g. grid=var.getGrid()
       variable          = CDMS variable object       # Variable object
    
    Other:
       [x|y]rev         = 0|1                         # if ==1, reverse the direction of the x
    							     or y axis
       continents	= 0,1,2,3,4,5,6,7,8,9,10,11   #	if &gt;=1, plot continental outlines
    							     (default: plot if xaxis is
    							     longitude, yaxis is latitude -or-
    							     xname is 'longitude' and yname is
    							     'latitude'
                                                      # The continents-type values are integers
						      # ranging from 0 to 11, where: 
						      #    0 signifies &quot;No Continents&quot; 
						      #    1 signifies &quot;Fine Continents&quot; 
						      #    2 signifies &quot;Coarse Continents&quot; 
						      #    3 signifies &quot;United States&quot;
						      #    4 signifies &quot;Political Borders&quot;
						      #    5 signifies &quot;Rivers&quot;

						      # Values 6 through 11 signify the line type
                                                      # defined by the files data_continent_other7
                                                      # through data_continent_other12. 

    Graphics Output in Background Mode:
       bg                 = 0|1   # if ==1, create images in the background
                                                             (Don't display the VCS Canvas)
    
 Note:
    More specific attributes take precedence over general attributes. In particular,
    specifie attributes override variable object attributes, dimension attributes and
    arrays override axis objects, which override grid objects, which override variable
    objects.
    
    For example, if both 'file_comment' and 'variable' keywords are specified, the value of
    'file_comment' is used instead of the file comment in the parent of variable. Similarly,
    if both 'xaxis' and 'grid' keywords are specified, the value of 'xaxis' takes precedence
    over the x-axis of grid.

 Example of Use:
    x=vcs.init()        # x is an instance of the VCS class object (constructor)
    x.plot(array)       # this call will use default settings for template and boxfill
    x.plot(array, 'AMIP', 'isofill','AMIP_psl') # this is specifying the template and 
                                                  graphics method
    t=x.gettemplate('AMIP')        # get a predefined the template 'AMIP'
    vec=x.getvector('quick')       # get a predefined the vector graphics method 'quick'
    x.plot(array1, array2, t, vec) # plot the data as a vector using the 'AMIP' template
    x.clear()                      # clear the VCS Canvas of all plots
    box=x.createboxfill('new')     # create boxfill graphics method 'new'
    x.plot(box,t,array)            # plot array data using box 'new' and template 't'

###############################################################################################################
###########################################                      ##############################################
########################################## End plot Description ###############################################
#########################################                      ################################################
###############################################################################################################
		</doc>
	</action>
	<action name="scatter" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab_or_primary_object doc="Data at least 1D, last dimension(s) will be plotted, or primary vcs object" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list/vcs.fillarea.Tf/vcs.line.Tl/vcs.marker.Tm/vcs.textcombined.Tc" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: scatter                      # Generate a scatter plot

 Description of Function:
    Generate a scatter plot given the data, scatter graphics method, and
    template. If no scatter class object is given, then the 'default' scatter
    graphics method is used. Similarly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('scatter')                   # Show all the existing scatter graphics methods
    sct=a.getscatter('quick')           # Create instance of 'quick'
    a.scatter(array,sct)                # Plot array using specified sct and default 
                                        #       template
    a.clear()                           # Clear VCS canvas
    a.scatter(array,sct,template)       # Plot array using specified sct and template

###################################################################################################################
###########################################                         ###############################################
########################################## End scatter Description ################################################
#########################################                         #################################################
###################################################################################################################
		</doc>
	</action>
	<action name="xvsy" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<yaxisconvert default="'linear'" doc="converting yaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab_or_primary_object doc="Data at least 1D, last dimension(s) will be plotted, or primary vcs object" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list/vcs.fillarea.Tf/vcs.line.Tl/vcs.marker.Tm/vcs.textcombined.Tc" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: xvsy                      # Generate a XvsY plot

 Description of Function:
    Generate a XvsY plot given the data, XvsY graphics method, and
    template. If no XvsY class object is given, then the 'default' XvsY
    graphics method is used. Similarly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('xvsy')                   # Show all the existing XvsY graphics methods
    xy=a.getxvsy('quick')            # Create instance of 'quick'
    a.xvsy(array,xy)                 # Plot array using specified xy and default 
                                     #       template
    a.clear()                        # Clear VCS canvas
    a.xvsy(array,xy,template)        # Plot array using specified xy and template

#################################################################################################################
###########################################                       ###############################################
########################################## End xvsy Description ################################################
#########################################                       #################################################
#################################################################################################################
		</doc>
	</action>
	<action name="xyvsy" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab doc="Data at least 1D, last dimension will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: xyvsy                        # Generate a Xyvsy plot

 Description of Function:
    Generate a Xyvsy plot given the data, Xyvsy graphics method, and
    template. If no Xyvsy class object is given, then the 'default' Xyvsy
    graphics method is used. Simerly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('xyvsy')                   # Show all the existing Xyvsy graphics methods
    xyy=a.getxyvsy('quick')           # Create instance of 'quick'
    a.xyvsy(array,xyy)                # Plot array using specified xyy and default 
                                        #       template
    a.clear()                           # Clear VCS canvas
    a.xyvsy(array,xyy,template)       # Plot array using specified xyy and template

#################################################################################################################
###########################################                       ###############################################
########################################## End xyvsy Description ################################################
#########################################                       #################################################
#################################################################################################################
		</doc>
	</action>
	<action name="yxvsx" type="function">
		<options>
			<datawc_timeunits default="'days since 2000'" doc="units to use when disaplaying time dimension auto tick" instance="str"/>
			<long_name doc="replaces long_name on plot" instance="str"/>
			<projection default="'default'" doc="projection to use, name or object" instance="str/vcs.projection.Proj"/>
			<xticlabels2 default="'*'" doc="values for labels on 2nd side of x axis" instance="str/{float:str}"/>
			<xarray doc="Values to use instead of x axis" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<yweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xweights doc="replace xaxis weights used for computing mean" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<warray doc="Values to use instead of w axis, only if var has more than 4D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<tunits doc="replace taxis units on plot (if exists)" instance="str"/>
			<ymtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<ymtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<datawc_x1 default="1.E20" doc="first value of xaxis on plot" instance="float"/>
			<datawc_x2 default="1.E20" doc="second value of xaxis on plot" instance="float"/>
			<continents doc="continents type number" instance="int"/>
			<xmtics1 default="''" doc="dictionary with location of intermediate tics as keys for 1st side of y axis" instance="str/{float:str}"/>
			<xmtics2 default="''" doc="dictionary with location of intermediate tics as keys for 2nd side of y axis" instance="str/{float:str}"/>
			<xbounds doc="Values to use instead of x axis bounds values" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<ybounds doc="Values to use instead of y axis bounds values (if exist)" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<datawc_y2 default="1.E20" doc="second value of yaxis on plot" instance="float"/>
			<wname doc="replace waxis name on plot (if exists)" instance="str"/>
			<file_comment doc="replaces file_comment on plot" instance="str"/>
			<datawc_calendar default="135441" doc="calendar to use when displaying time dimension auto tick, default is proleptic gregorian calendar" instance="int"/>
			<wunits doc="replace waxis units on plot (if exists)" instance="str"/>
			<xrev doc="reverse x axis" instance="bool"/>
			<zaxis doc="Axis object to replace the slab -3 dim axis, only if slab has more than 2D" instance="cdms2.axis.TransientAxis"/>
			<ymd doc="replaces year/month/day on plot" instance="str"/>
			<yarray doc="Values to use instead of y axis, only if var has more than 1D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<units doc="replaces units value on plot" instance="str"/>
			<yunits doc="replace yaxis units on plot (if exists)" instance="str"/>
			<zarray doc="Values to use instead of z axis, only if var has more than 2D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<xname doc="replace xaxis name on plot" instance="str"/>
			<tarray doc="Values to use instead of t axis, only if var has more than 3D" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list"/>
			<bg doc="plots in background mode" instance="bool/int"/>
			<xaxis doc="Axis object to replace the slab -1 dim axis" instance="cdms2.axis.TransientAxis"/>
			<xaxisconvert default="'linear'" doc="converting xaxis linear/log/log10/ln/exp/area_wt" instance="str"/>
			<zname doc="replace zaxis name on plot (if exists)" instance="str"/>
			<hms doc="replaces hh/mm/ss on plot" instance="str"/>
			<tname doc="replace taxis name on plot (if exists)" instance="str"/>
			<grid doc="replaces array grid (if exists)" instance="cdms2.grid.TransientRectGrid"/>
			<yname doc="replace yaxis name on plot (if exists)" instance="str"/>
			<ratio doc="sets the y/x ratio ,if passed as a string with 't' at the end, will aslo moves the ticks" instance="int/str"/>
			<datawc_y1 default="1.E20" doc="first value of yaxis on plot" instance="float"/>
			<xunits doc="replace xaxis units on plot" instance="str"/>
			<name doc="replaces variable name on plot
time &quot;&quot; (cdtime.comptime/cdtime.reltime/cdtime.abstime) () replaces time name on plot" instance="str"/>
			<yaxis doc="Axis object to replace the slab -2 dim axis, only if slab has more than 1D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels1 default="'*'" doc="values for labels on 1st side of y axis" instance="str/{float:str}"/>
			<waxis doc="Axis object to replace the slab -5 dim axis, only if slab has more than 4D" instance="cdms2.axis.TransientAxis"/>
			<yticlabels2 default="'*'" doc="values for labels on 2nd side of y axis" instance="str/{float:str}"/>
			<comment1 doc="replaces comment1 on plot" instance="str"/>
			<zunits doc="replace zaxis units on plot (if exists)" instance="str"/>
			<comment3 doc="replaces comment3 on plot" instance="str"/>
			<comment2 doc="replaces comment2 on plot" instance="str"/>
			<xticlabels1 default="'*'" doc="values for labels on 1st side of x axis" instance="str/{float:str}"/>
			<comment4 doc="replaces comment4 on plot" instance="str"/>
			<yrev doc="reverse y axis, only if slab has more than 1D" instance="bool"/>
			<taxis doc="Axis object to replace the slab -4 dim axis, only if slab has more than 3D" instance="cdms2.axis.TransientAxis"/>
		</options>
		<input>
			<slab doc="Data at least 1D, last dimension will be plotted" instance="cdms2.tvariable.TransientVariable/numpy.core.ma.MaskedArray/numpy.ndarray/list" position="0"/>
		</input>
		<output>
			<display doc="no default" instance="vcs.displayplot.Dp" position="0"/>
		</output>
		<doc>
			Function: yxvsx                        # Generate a Yxvsx plot

 Description of Function:
    Generate a Yxvsx plot given the data, Yxvsx graphics method, and
    template. If no Yxvsx class object is given, then the 'default' Yxvsx
    graphics method is used. Simerly, if no template class object is given,
    then the 'default' template is used.

 Example of Use:
    a=vcs.init()
    a.show('yxvsx')                   # Show all the existing Yxvsx graphics methods
    yxx=a.getyxvsx('quick')           # Create instance of 'quick'
    a.yxvsx(array,yxx)                # Plot array using specified yxx and default
                                      #       template
    a.clear()                         # Clear VCS canvas
    a.yxvsx(array,yxx,template)       # Plot array using specified yxx and template

#################################################################################################################
###########################################                       ###############################################
########################################## End yxvsx Description ################################################
#########################################                       #################################################
#################################################################################################################
		</doc>
	</action>
</diagnostic>
